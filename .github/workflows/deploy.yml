name: Bygg og deploy
on:
  push:
    branches:
      - master

env:
  IMAGE: docker.pkg.github.com/${{ github.repository }}/pdfgen:${{ github.sha }}
  GITHUB_SHA: ${{ github.sha }}
  DOCKERHUB_IMAGE: navikt/pdfgen

jobs:
  build:
    name: Build and push docker image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@master
      - uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-cache-${{ hashFiles('build.gradle.kts') }}
          restore-keys: |
            ${{ runner.os }}-gradle-cache-
      - uses: actions/cache@v1
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-wrapper-
      - name: Run tests
        env:
          ORG_GRADLE_PROJECT_githubUser: x-access-token
          ORG_GRADLE_PROJECT_githubPassword: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ./gradlew test
      - name: Build jar
        env:
          ORG_GRADLE_PROJECT_githubUser: x-access-token
          ORG_GRADLE_PROJECT_githubPassword: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ./gradlew shadowJar -x test
          echo "version=$(./gradlew -q printVersion)" >> $GITHUB_ENV
      - name: Build Docker images
        run: |
          docker build --tag ${IMAGE} .
      - name: Push docker image to GitHub
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          docker login docker.pkg.github.com -u ${GITHUB_REPOSITORY} -p ${GITHUB_TOKEN}
          docker push ${IMAGE}
      - name: Push docker image to Dockerhub
        env:
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          docker login -u martinsolheim -p ${DOCKERHUB_TOKEN}
          docker tag ${IMAGE} ${DOCKERHUB_IMAGE}:latest
          docker tag ${IMAGE} ${DOCKERHUB_IMAGE}:${GITHUB_SHA}
          docker tag ${IMAGE} ${DOCKERHUB_IMAGE}:${version}
          docker push ${DOCKERHUB_IMAGE}:latest
          docker push ${DOCKERHUB_IMAGE}:${GITHUB_SHA}
          docker push ${DOCKERHUB_IMAGE}:${version}

  deployDev:
    name: Deploy to dev
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-fss
          RESOURCE: naiserator.yaml

  deployProd:
    name: Deploy to prod
    needs: [build, deployDev]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: prod-fss
          RESOURCE: naiserator.yaml
